name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1"
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: generador-boletines-739449
  EXPEDIENTE: "739449"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - id: vars
        run: |
          RAW_BRANCH="${{ github.ref_name }}"
          CLEAN_BRANCH=$(echo "$RAW_BRANCH" | sed -E 's:^(feature/|hotfix/|bugfix/|release/)::')
          echo "branch_name=$CLEAN_BRANCH" >> "$GITHUB_OUTPUT"

      - run: echo "VERSION_TAG=1.0.${{ github.run_number }}-${{ steps.vars.outputs.branch_name }}" >> $GITHUB_ENV
      
      - run: echo "DOCKER_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$VERSION_TAG" >> $GITHUB_ENV

      - run: npm ci
      
      - run: npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: ./dist

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - id: vars
        run: |
          RAW_BRANCH="${{ github.ref_name }}"
          CLEAN_BRANCH=$(echo "$RAW_BRANCH" | sed -E 's:^(feature/|hotfix/|bugfix/|release/)::')
          echo "branch_name=$CLEAN_BRANCH" >> "$GITHUB_OUTPUT"

      - run: echo "VERSION_TAG=1.0.${{ github.run_number }}-${{ steps.vars.outputs.branch_name }}" >> $GITHUB_ENV
      
      - run: echo "DOCKER_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$VERSION_TAG" >> $GITHUB_ENV

      - run: |
          docker build -t $ECR_REPOSITORY:latest .
          docker tag $ECR_REPOSITORY:latest $DOCKER_IMAGE
          docker push $DOCKER_IMAGE

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - id: vars
        run: |
          RAW_BRANCH="${{ github.ref_name }}"
          CLEAN_BRANCH=$(echo "$RAW_BRANCH" | sed -E 's:^(feature/|hotfix/|bugfix/|release/)::')
          echo "branch_name=$CLEAN_BRANCH" >> "$GITHUB_OUTPUT"

      - run: echo "VERSION_TAG=1.0.${{ github.run_number }}-${{ steps.vars.outputs.branch_name }}" >> $GITHUB_ENV
      
      - run: echo "DOCKER_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$VERSION_TAG" >> $GITHUB_ENV

      - run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/ssh_key.pem
          chmod 600 /tmp/ssh_key.pem

      - env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          cat > /tmp/deploy_vars.sh << EOF
          export AWS_REGION="${AWS_REGION}"
          export AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"
          export DOCKER_IMAGE="${DOCKER_IMAGE}"
          export EXPEDIENTE="${EXPEDIENTE}"
          EOF
          scp -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem /tmp/deploy_vars.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/deploy_vars.sh

      - env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            source /home/${{ secrets.EC2_USER }}/deploy_vars.sh
            aws configure set aws_access_key_id \$AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key \$AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token \$AWS_SESSION_TOKEN
            aws configure set region \$AWS_REGION
            aws ecr get-login-password --region \$AWS_REGION | docker login --username AWS --password-stdin \$AWS_ACCOUNT_ID.dkr.ecr.\$AWS_REGION.amazonaws.com
          "

      - env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            source /home/${{ secrets.EC2_USER }}/deploy_vars.sh
            docker stop generador-boletines || true
            docker rm generador-boletines || true
            docker pull \$DOCKER_IMAGE
            docker run -d --name generador-boletines \\
              -p 3001:3001 \\
              -e AWS_REGION=\$AWS_REGION \\
              -e AWS_ACCESS_KEY_ID=\$AWS_ACCESS_KEY_ID \\
              -e AWS_SECRET_ACCESS_KEY=\$AWS_SECRET_ACCESS_KEY \\
              -e AWS_SESSION_TOKEN=\$AWS_SESSION_TOKEN \\
              -e DYNAMODB_TABLE=Practica5DB \\
              -e S3_BUCKET_NAME=practica-5-\$EXPEDIENTE \\
              --restart unless-stopped \\
              \$DOCKER_IMAGE
            rm /home/${{ secrets.EC2_USER }}/deploy_vars.sh
          " 